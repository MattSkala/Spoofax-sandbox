module example

language minijava

start symbol Exp

test just int 				[[12]] parse succeeds

test addition 				[[1 + 1]] parse succeeds
test additon single r		[[+1]] parse fails
test additon single l		[[1+]] parse fails

test subtraction			[[1 - 1]] parse succeeds
test subtraction single r	[[-1]] parse fails
test subtraction single l	[[1-]] parse fails

test bool					[[[true && false]]] parse succeeds
test lt						[[3 < 5]] parse succeeds

test array					[[[new int [ 12 ]]]] parse succeeds
test array no index			[[[array[]]]] parse fails
test array negative index	[[[array[-1]]]] parse fails
test array length			[[array.length]] parse succeeds
test this length			[[this.length]] parse succeeds
test int length				[[1.length]] parse succeeds

test new object				[[new Dog()]] parse succeeds
test new object with param	[[new Cat(1)]] parse fails

test call no param			[[foo.bar()]] parse succeeds
test singe call				[[foo()]] parse fails
test call param				[[foo.bar(2)]] parse succeeds
test call param var			[[foo.bar(var)]] parse succeeds
test call param ref			[[foo.bar(&var))]] parse fails
test call param multiple	[[foo.bar(var,2,string)]] parse succeeds

test negation				[[!bool]] parse succeeds
test negation2				[[!(3 < var)]] parse succeeds
test negation not			[[not var]] parse fails

test double negation		[[!!bool]] parse succeeds

test large expression		[[! ((3 < var ) && (less < more) && (3 -2) && foo.bar(string))]] parse succeeds

test invalid paranthesis	[[ (3 < 5]] parse fails
test invalid paranthesis2	[[ foo.bar())]] parse fails
test single paranthesis		[[(bar)]] parse succeeds

// reject other commonly used operators of java
test modulo					[[10 % 5]] parse fails
test shift left				[[var << 2]] parse fails
test shift right			[[var >> 2]] parse fails
test shift signed			[[var >>> 3]] parse fails
test gt						[[3 > 5]] parse fails
test get					[[var >= 2]] parse fails
test let					[[var <= 2]] parse fails
test equality				[[var == 6]] parse fails
test inequality				[[var != 6]] parse fails
test bitwise and			[[var & 7]] parse fails
test bitwise or				[[var | 7]] parse fails
test logical or				[[var || other_var]] parse fails
test negation ~				[[~bool]] parse fails

